import React, { useState } from 'react';
import { Paper, Typography, Button, Box, Chip, Divider, IconButton, Grid } from '@mui/material';
import CloseIcon from '@mui/icons-material/Close';
import HistoryIcon from '@mui/icons-material/History';
import SettingsIcon from '@mui/icons-material/Settings';
import NotificationsIcon from '@mui/icons-material/Notifications';

const SensorInfo = ({ sensor, onClose }) => {
  const [showHistory, setShowHistory] = useState(false);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ sensor
  if (!sensor || typeof sensor !== 'object') {
    return null;
  }

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–∞ –¥–∞—Ç—á–∏–∫–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
  const getSensorTypeName = (type) => {
    if (!type) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
    
    switch (type) {
      case 'temperature':
        return '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞';
      case 'humidity':
        return '–í–ª–∞–∂–Ω–æ—Å—Ç—å';
      case 'fire':
        return '–ü–æ–∂–∞—Ä–Ω—ã–π';
      case 'movement':
        return '–î–≤–∏–∂–µ–Ω–∏–µ';
      case 'security':
        return '–ö–∞–º–µ—Ä–∞';
      case 'server':
        return '–°–µ—Ä–≤–µ—Ä';
      case 'water':
        return '–ü—Ä–æ—Ç–µ—á–∫–∞';
      case 'gas':
        return '–ì–∞–∑';
      case 'power':
        return '–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è';
      default:
        return '–î–∞—Ç—á–∏–∫';
    }
  };

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
  const getStatusName = (status) => {
    if (!status) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    
    switch (status) {
      case 'normal':
        return '–ù–æ—Ä–º–∞–ª—å–Ω—ã–π';
      case 'warning':
        return '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ';
      case 'alarm':
        return '–¢—Ä–µ–≤–æ–≥–∞';
      case 'high':
        return '–ü–æ–≤—ã—à–µ–Ω–Ω—ã–π';
      default:
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  };

  // –¶–≤–µ—Ç –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
  const getStatusColor = (status) => {
    if (!status) return '#AAAAAA';
    
    switch (status) {
      case 'normal':
        return '#44CC44';
      case 'warning':
        return '#FFAA00';
      case 'alarm':
        return '#FF0000';
      case 'high':
        return '#9900FF';
      default:
        return '#44CC44';
    }
  };

  // –ò–∫–æ–Ω–∫–∞ –¥–ª—è —Ç–∏–ø–∞ –¥–∞—Ç—á–∏–∫–∞
  const getSensorIcon = (type) => {
    if (!type) return '‚ùì';
    
    switch (type) {
      case 'temperature':
        return 'üå°Ô∏è';
      case 'humidity':
        return 'üíß';
      case 'fire':
        return 'üî•';
      case 'movement':
        return 'üë§';
      case 'security':
        return 'üì∑';
      case 'server':
        return 'üíª';
      case 'water':
        return 'üöø';
      case 'gas':
        return '‚öóÔ∏è';
      case 'power':
        return '‚ö°';
      default:
        return 'üìä';
    }
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö (—Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö, –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
  const generateHistory = () => {
    if (!showHistory) return null;

    return (
      <Box sx={{ mt: 2, pt: 2, borderTop: '1px dashed #ccc' }}>
        <Typography variant="subtitle2" gutterBottom>
          –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π
        </Typography>
        <Box sx={{ 
          height: '100px', 
          backgroundColor: '#f9f9f9', 
          borderRadius: '4px',
          p: 1,
          display: 'flex',
          alignItems: 'flex-end',
          justifyContent: 'space-between'
        }}>
          {[0.7, 0.5, 0.8, 0.9, 0.8, 0.75, 0.9, 0.95, 0.85, 0.8].map((h, i) => (
            <Box
              key={i}
              sx={{
                height: `${h * 80}px`,
                width: '6px',
                backgroundColor: getGraphColor(h),
                borderRadius: '2px'
              }}
            />
          ))}
        </Box>
        <Typography variant="caption" sx={{ display: 'block', textAlign: 'right', mt: 0.5 }}>
          –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —á–∞—Å–æ–≤
        </Typography>
      </Box>
    );
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
  const getGraphColor = (value) => {
    if (value > 0.9) return '#FF0000';
    if (value > 0.7) return '#FFAA00';
    return '#44CC44';
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–∞—Ç—á–∏–∫–∞
  const getTypeSpecificInfo = () => {
    if (!sensor || !sensor.type) return null;
    
    switch (sensor.type) {
      case 'temperature':
        return (
          <Typography variant="body2">
            <strong>–ù–æ—Ä–º–∞:</strong> 18-24¬∞C
          </Typography>
        );
      case 'humidity':
        return (
          <Typography variant="body2">
            <strong>–ù–æ—Ä–º–∞:</strong> 40-60%
          </Typography>
        );
      case 'security':
        return (
          <Typography variant="body2">
            <strong>–£–≥–æ–ª –æ–±–∑–æ—Ä–∞:</strong> {sensor.angle || 0}¬∞
          </Typography>
        );
      default:
        return null;
    }
  };

  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
  const sensorName = sensor.name || '–ë–µ–∑ –∏–º–µ–Ω–∏';
  const sensorType = sensor.type || 'unknown';
  const sensorStatus = sensor.status || 'unknown';
  const sensorValue = sensor.value || '–ù/–î';
  const sensorId = sensor.id || '?';
  const sensorX = sensor.x || 0;
  const sensorY = sensor.y || 0;

  return (
    <Paper 
      elevation={3} 
      sx={{ 
        position: 'absolute', 
        bottom: '20px', 
        right: '20px', 
        padding: '16px',
        width: '350px',
        backgroundColor: '#fff',
        borderTop: `4px solid ${getStatusColor(sensorStatus)}`
      }}
    >
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
        <Box sx={{ display: 'flex', alignItems: 'center' }}>
          <Typography variant="h6" component="span" sx={{ mr: 1 }}>
            {getSensorIcon(sensorType)} {sensorName}
          </Typography>
          <Chip 
            label={getStatusName(sensorStatus)} 
            size="small" 
            sx={{ 
              backgroundColor: getStatusColor(sensorStatus), 
              color: 'white',
              fontWeight: 'bold'
            }} 
          />
        </Box>
        <IconButton size="small" onClick={onClose}>
          <CloseIcon fontSize="small" />
        </IconButton>
      </Box>
      
      <Divider sx={{ mb: 2 }} />
      
      <Box sx={{ mb: 2 }}>
        <Typography variant="body1" gutterBottom>
          <strong>–¢–∏–ø –¥–∞—Ç—á–∏–∫–∞:</strong> {getSensorTypeName(sensorType)}
        </Typography>
        <Typography variant="body1" gutterBottom>
          <strong>–ó–Ω–∞—á–µ–Ω–∏–µ:</strong> {sensorValue}
        </Typography>
        {getTypeSpecificInfo()}
        <Typography variant="body2" sx={{ mt: 1, fontSize: '0.8rem', color: '#666' }}>
          <strong>ID:</strong> {sensorId}
        </Typography>
        <Typography variant="body2" sx={{ fontSize: '0.8rem', color: '#666' }}>
          <strong>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</strong> x:{sensorX}, y:{sensorY}
        </Typography>
      </Box>
      
      {generateHistory()}
      
      <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 2 }}>
        <Button 
          variant="outlined" 
          size="small"
          startIcon={<HistoryIcon />}
          onClick={() => setShowHistory(!showHistory)}
        >
          {showHistory ? '–°–∫—Ä—ã—Ç—å –∏—Å—Ç–æ—Ä–∏—é' : '–ò—Å—Ç–æ—Ä–∏—è'}
        </Button>
        
        <Box>
          <IconButton size="small" color="primary" sx={{ mr: 1 }}>
            <SettingsIcon fontSize="small" />
          </IconButton>
          <IconButton size="small" color="primary">
            <NotificationsIcon fontSize="small" />
          </IconButton>
        </Box>
      </Box>
    </Paper>
  );
};

export default SensorInfo; 